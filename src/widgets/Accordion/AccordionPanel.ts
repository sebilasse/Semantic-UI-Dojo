import { mixin } from '@dojo/core/lang';
import uuid from '@dojo/core/uuid';
import { META, RNode, Properties, Base, theme, classy, is, v, w } from '../../lib/main';
import getElementType from '../../lib/getElementType';
import Icon, { IconProps } from '../Icon/Icon';
import AccordionContent from './AccordionContent';
import AccordionTitle from './AccordionTitle';
import AccordionMeta from './AccordionMeta';
import * as progressiveCSS from './main.css';

// TODO : disabled, content ellipsis if not title

/**
 * An accordion panel consists of a `title` with an optional `icon` which
 * can expand to show optional `meta` and `content`
 */
export interface AccordionPanelProps extends Properties {
  /** Whether or not meta and content is visible. */
  active?: boolean;
  /** An AccordionPanel contains an Icon indicating expansion. Setting false means 'no icon'. */
  icon?: boolean | string | IconProps;
  /** Shorthand for AccordionContent (hidden when inactive). */
  content: string | Properties;
  /** Shorthand for AccordionMeta (hidden when inactive). */
  meta?: string | Properties;
  /** Shorthand for AccordionTitle (always visible). */
  title: string;
  /** An id to group exclusive items. Autogenerated by Accordion. */
  exclusiveId?: string;
  /**
   * Called when this panel is opened or closed.
   *
   * @param {CustomEvent} event - The Event.
   */
  onChange?: (event: CustomEvent) => void;
  /**
   * Called when this panel is opened.
   *
   * @param {CustomEvent} event - The Event.
   */
  onOpen?: (event: CustomEvent) => void;
  /**
   * Called when this panel is closed.
   *
   * @param {CustomEvent} event - The Event.
   */
  onClose?: (event: CustomEvent) => void;
  /**
   * Called when this panel is clicked.
   *
   * @param {Event} event - The Event.
   * @param {number} index - The index of the clicked panel.
   */
  onClick?: (event: MouseEvent & TouchEvent) => void;
}

export default class AccordionPanel extends Base<AccordionPanelProps> {
  static meta = {
    title: 'AccordionPanel',
    parent: 'Accordion',
    namespace: META.NAME.SUI, type: META.TYPES.MODULE, atomic: META.ATOMIC.ORGANISM
  };
  private _key = '';

  private _onChange(event: MouseEvent & TouchEvent) {
    const { onChange, onOpen, onClose, active, exclusiveId } = this.properties;
    const action = (<HTMLInputElement>event.target).checked ? 'open' : 'close';
    const detail: any = { key: this._key, action };
    this.evt('accordionChange', detail, event.target);
    this.evt('change', detail, event.target)
  }
  private _onClick(event: MouseEvent & TouchEvent) {
    event.stopPropagation();
    const detail: any = { key: this._key };
    this.evt('accordionClick', detail, event.target);
    this.evt('click', detail, event.target);
  }

	render() {
		const {
      active = false,
      content = 'â€¦', meta = null, title = null, icon = null,
      exclusiveId, key = `AccordionPanel-${uuid()}`, ...rest
    } = this.properties;
    this._key = key;

    const titleW = AccordionTitle.create(title, {active});
    if (exclusiveId) {
      const closeTrigger = v('label', { for: `close_${exclusiveId}` }, []);
      titleW.children.unshift(closeTrigger);
    }
    const children = [
      v('input', {
        type: (!!exclusiveId) ? 'radio' : 'checkbox',
        checked: active,
        name: exclusiveId,
        onchange: this._onChange
      }),
      titleW,
      AccordionMeta.create(meta),
      AccordionContent.create(content),
      ...this.children
    ];
    const props = {
      ...rest,
			classes: this.classes().fixed(...this.fixed, progressiveCSS.details),
      onmousedown: this._onClick
		}
    const ElementType = (typeof this.properties.as === 'string') ? this.properties.as : null;

    const Panel = v('label.panel', props, children);
		return (!ElementType) ? Panel : v(ElementType, {}, [Panel]);
	}
}
